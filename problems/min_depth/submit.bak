// https://leetcode.com/problems/minimum-depth-of-binary-tree/
/** Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
Note: A leaf is a node with no children.
*/
// submission: https://leetcode.com/submissions/detail/832082105/
package main

import (
	"fmt"
)

//TreeNode Example binary tree
type TreeNode struct {
	Val   int
	Left  *TreeNode
	Right *TreeNode
}

func options() {
	leaf9 := TreeNode{Val: 9}
	leaf15 := TreeNode{Val: 15}
	leaf7 := TreeNode{Val: 7}
	leaf20 := TreeNode{
		Val:   20,
		Left:  &leaf15,
		Right: &leaf7,
	}
	tree := TreeNode{
		Val:   3,
		Left:  &leaf9,
		Right: &leaf20,
	}
	count := minDepth(&tree)
	fmt.Println(count)
	tree1 := TreeNode{
		Val: 2,
		Right: &TreeNode{
			Val: 3,
			Right: &TreeNode{
				Val: 4,
				Right: &TreeNode{
					Val: 5,
					Right: &TreeNode{
						Val: 6,
					},
				},
			},
		},
	}

	secondTry := minDepth(&tree1)
	fmt.Println("Second tree parse", secondTry)
}

func minDepth(root *TreeNode) int {
	if root == nil {
		return 0
	}
	if root.Right == nil && root.Left == nil {
		return 1
	}
	if root.Left == nil {
		return 1 + minDepth(root.Right)
	}
	if root.Right == nil {
		return 1 + minDepth(root.Left)
	}
	left := 1 + minDepth(root.Left)
	right := 1 + minDepth(root.Right)
	return min(left, right)
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

/**
* Input: root = [3,9,20,null,null,15,7]
* Output: 2
* Input: root = [2,null,3,null,4,null,5,null,6]
* Output: 5
 */
